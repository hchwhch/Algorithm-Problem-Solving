#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <unordered_map>
#include <stack>
#include <queue>

using namespace std;

int n, m;
int board[505][505];
bool vis[505][505];
int d[505][505];

int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

//재귀 DFS와 DP를 이용해 풀이가능

int func(int x, int y)
{
  //목표지점에 도달하면 재귀 종료  
	if (x == n - 1 && y == m - 1) return 1;

  //DP를 이용한 Bottom-UP
	if (d[x][y] != -1) return d[x][y];
  
	d[x][y] = 0;

	for (int i = 0; i < 4; i++)
	{
		int nx = x + dx[i];
		int ny = y + dy[i];
		if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
    
    //재귀를 통한 DFS
		if (board[nx][ny] < board[x][y]) d[x][y] += func(nx, ny);
	}
	return d[x][y];
}

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cin >> board[i][j], d[i][j] = -1;
	}

	cout << func(0, 0);
}
