#include<iostream>

using namespace std;

typedef long long ll;

//자신의 부모의 인덱스를 가지고 있는 배열
int board[1000005];

//원소의 부모를 반환하는 함수
int getParent(int parent[], int x)
{
  //재귀를 이용해 최종적인 자신의 부모를 찾아냄
	if (parent[x] == x) return x;
	return parent[x] = getParent(parent, parent[x]);
}

//두 집합을 하나의 집합으로 합치는 함수
void unionParent(int parent[], int a, int b)
{
	a = getParent(parent, a);
	b = getParent(parent, b);

  //두 수의 부모중 더 작은 값으로 합침 
	if (a < b) parent[b] = a;
	else parent[a] = b;
}

//두 원소가 같은 집합에 있는지 확인하는 함수
bool isSameUnion(int parent[], int a, int b)
{
	a = getParent(parent, a);
	b = getParent(parent, b);

	if (a == b) return 1;
	else return 0;
}

int n, m;

int main()
{
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n >> m;

	for (int i = 0; i <= 1000000; i++) board[i] = i;

	for (int i = 0; i < m; i++)
	{
		int order;
		cin >> order;

		int a, b;
		cin >> a >> b;

		if (order == 0)
		{
			unionParent(board, a, b);
		}
		else
		{
			cout << (isSameUnion(board, a, b) ? "YES" : "NO") << '\n';
		}
	}
}
